#ifndef THIRD_PARTY_NANOLIBC_CXX_INCLUDE_STRING_
#define THIRD_PARTY_NANOLIBC_CXX_INCLUDE_STRING_

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

namespace std {

class string {
 public:
  static constexpr size_t npos = ~static_cast<size_t>(0);

  // Creates a string of `size` elements initilized to `value`.
  explicit string(size_t size = 0, char value = '\0')
      : size_(size), data_(NewData(size_)) {
    if (size_ != 0) {
      memset(data_, value, size_);
    }
  }

  // Creates a string of `size` bytes from `data`.
  string(const void* data, size_t size) : size_(size), data_(NewData(size_)) {
    if (size_ != 0) {
      memcpy(data_, data, size_);
    }
  }

  // Create a string from a '\0' terminated C string.
  string(const char* data) : size_(strlen(data)), data_(NewData(size_)) {
    if (size_ != 0) {
      memcpy(data_, data, size_);
    }
  }

  // Copy constructor.
  string(const string& other) : size_(other.size_), data_(NewData(size_)) {
    if (size_ != 0) {
      memcpy(data_, other.data_, size_);
    }
  }

  // Copy constructor.
  string(string&& other) : size_(other.size_), data_(other.data_) {
    other.data_ = nullptr;
    other.size_ = 0;
  }

  // Move operator.
  string& operator= (string&& other) {
    clear();
    size_ = other.size_;
    data_ = other.data_;
    other.data_ = nullptr;
    other.size_ = 0;
    return *this;
  }

  // Assignment operator.
  string& operator= (const string& other) {
    clear();
    size_ = other.size_;
    data_ = NewData(size_);
    if (size_ != 0) {
      memcpy(data_, other.data_, size_);
    }
    return *this;
  }

  ~string() { clear(); }

  string substr(size_t pos = 0, size_t len = ((size_t)-1)) const {
    // Note: be careful about checking for overflow.
    if (pos > size_) {
      fprintf(stderr, "Indexed past end of string buffer in substr.\n");
      abort();
    }
    if (len > size_ - pos) {
      len = size_ - pos;
    }
    return string(data_ + pos, len);
  }

  size_t size() const { return size_; }
  bool empty() const { return size_ == 0; }
  void clear() {
    delete[] data_;
    data_ = nullptr;
    size_ = 0;
  }

  char& operator[](size_t index) { return data_[index]; }
  char operator[](size_t index) const { return data_[index]; }
  char& at(size_t index) { return data_[index]; }
  char at(size_t index) const { return data_[index]; }

  char* data() const {
    if (data_ == nullptr) {
      return "";
    }
    return data_;
  }
  const char* c_str() const { return data(); }

  int compare(char* data, size_t size) const {
    size_t min = size_ <= size ? size_ : size;
    int res = 0;
    if (min != 0) {
      res = memcmp(data_, data, min);
    }
    if (res != 0) {
      return res;
    }
    if (size_ < size) {
      return -1;
    }
    if (size_ > size) {
      return 1;
    }
    return 0;
  }

  int compare(const string& other) const {
    return compare(other.data_, other.size_);
  }

  bool operator==(const string& other) const { return compare(other) == 0; }
  bool operator!=(const string& other) const { return compare(other) != 0; }
  bool operator<=(const string& other) const { return compare(other) <= 0; }
  bool operator>=(const string& other) const { return compare(other) >= 0; }
  bool operator<(const string& other) const { return compare(other) < 0; }
  bool operator>(const string& other) const { return compare(other) > 0; }

  void resize(size_t size, char c = '\0') {
    char* data = NewData(size);
    size_t min_pos = size <= size_ ? size : size_;
    if (min_pos != 0) {
      memcpy(data, data_, min_pos);
    }
    size_t num_to_pad = size - min_pos;
    if (num_to_pad != 0) {
      memset(data + min_pos, c, num_to_pad);
    }
    clear();
    data_ = data;
    size_ = size;
  }

  string& operator+=(const string& other) {
    if (other.size_ != 0) {
      size_t old_size = size_;
      resize(size_ + other.size_);
      memcpy(data_ + old_size, other.data_, other.size_);
    }
    return *this;
  }

  string& append(const string& other) {
    size_t old_size = size_;
    resize(size_ + other.size_);
    memcpy(data_ + old_size, other.data_, other.size_);
    return *this;
  }

  string& replace(size_t pos, size_t len, const string& str) {
    if (pos > size_) {
      fprintf(stderr, "Indexed past end of string buffer in replace.\n");
      abort();
    }
    if (len > size_ - pos) {
      len = size_ - pos;
    }
    size_t new_size = size_ + str.size_ - len;
    if (new_size == 0) {
      clear();
      return *this;
    }
    char* new_data = NewData(new_size);
    memcpy(new_data, data_, pos);
    memcpy(new_data + pos, str.data_, str.size_);
    size_t remaining = size_ - pos - len;
    memcpy(new_data + pos + str.size_, data_ + pos + len, remaining);
    delete[] data_;
    data_ = new_data;
    size_ = new_size;
    return *this;
  }

  char* begin() const { return data_; }
  char* end() const { return data_ + size_; }

 private:
  // Like all other std::string implementations, we allocate a '\0' at the end
  // of every non-empty string so that c_str() can just return data().
  static char* NewData(size_t size) {
    if (size == 0) {
      return nullptr;
    }
    char* data = new char[size + 1];
    data[size] = '\0';
    return data;
  }

  size_t size_;
  char* data_;
};

inline bool operator==(const char* data, const string& s) {
  return s.compare(data) == 0;
}
inline bool operator!=(const char* data, const string& s) {
  return s.compare(data) != 0;
}
inline bool operator<=(const char* data, const string& s) {
  return s.compare(data) >= 0;
}
inline bool operator>=(const char* data, const string& s) {
  return s.compare(data) <= 0;
}
inline bool operator<(const char* data, const string& s) {
  return s.compare(data) > 0;
}
inline bool operator>(const char* data, const string& s) {
  return s.compare(data) < 0;
}

inline string operator+(const string& s1, const string& s2) {
  string result(s1.size() + s2.size());
  memcpy(result.data(), s1.data(), s1.size());
  memcpy(result.data() + s1.size(), s2.data(), s2.size());
  return result;
}

inline string to_string(size_t val) {
  char buf[32];  // Large enough to hold 1 << 64 in base 10.
  sprintf(buf, "%u", val);
  return buf;
}

}  // namespace std

#endif  // THIRD_PARTY_NANOLIBC_CXX_INCLUDE_STRING_
