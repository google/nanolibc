#ifndef THIRD_PARTY_NANOLIBC_CXX_MEMORY_
#define THIRD_PARTY_NANOLIBC_CXX_MEMORY_

#include <utility>

namespace std {

template <typename T>
struct default_delete {
  default_delete() {}
  void operator()(T* ptr) const {
    delete ptr;
  }
};

template <typename T, typename Deleter = default_delete<T>>
class unique_ptr {
 public:
  unique_ptr() : ptr_(nullptr) {}
  explicit unique_ptr(T* t) : ptr_(t) {}
  unique_ptr(unique_ptr<T>&& other) {
    ptr_ = other.release();
  }
  unique_ptr<T>& operator=(unique_ptr<T>&& other) {
    ptr_ = other.release();
    return *this;
  }
  ~unique_ptr() { reset(); }

  unique_ptr(const unique_ptr<T>& other) = delete;
  unique_ptr<T>& operator=(const unique_ptr<T>& ptr) = delete;

  T* get() const { return ptr_; }

  void reset(T* ptr = nullptr) {
    if (ptr_ != nullptr) {
      delete ptr_;
    }
    ptr_ = ptr;
  }

  T* release() {
    T* ptr = ptr_;
    ptr_ = nullptr;
    return ptr;
  }

  T* operator->() const { return ptr_; }

  T& operator* () const { return *ptr_; }

  explicit operator bool() const { return ptr_ != nullptr; }

 private:
  T* ptr_;
};

template <typename T, typename... Args>
unique_ptr<T> make_unique(Args&&... args) {
  return unique_ptr<T>(new T(forward<Args>(args)...));
}

}  // namespace std

#endif  // THIRD_PARTY_NANOLIBC_CXX_MEMORY_
